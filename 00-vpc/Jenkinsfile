pipeline {
    agent {
        label 'AGENT-1'
    }
    environment {
        appVersion = ''
        REGION = "us-east-1" 
        PROJECT = "roboshop"
        ACC_ID  = "888947293288"   
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }/* 
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password') 
    } */
    //Build 
    stages {
        stage('init'){
            steps{
                script{
                    withAWS(credentials: 'aws-creds', region: 'us-east-1'){
                      sh """
                       cd 00-vpc
                       terraform init -reconfigure 
                      """
                    }  
                }
            }
        }
        stage('plan'){
            steps {
                script{
                    withAWS(credentials: 'aws-creds', region: 'us-east-1'){
                      sh """
                       cd 00-vpc 
                       terraform plan
                      """ 
                    }  
                }
            }
        }
        stage('apply'){
            input {
                message "Should we continue?"
                ok "Yes, we should."
                submitter "alice,bob"
            }
            steps{
                script{
                    withAWS(credentials: 'aws-creds', region: 'us-east-1'){
                     sh """
                        cd 00-vpc 
                        terraform apply-auto-approve    
                     """
                    }
                }
            }
        }
        // Down stream job 
        stage('Trigger SG'){
            steps{
                script{
                    build job: 'catalogue-cd'
                       propagate: fasle // even sg fails vpc will not be effected 
                       wait: false // vpc will not wait for sg pipeline completion 
                }
            }
        }
    }
    post {
        always{
            echo "I will always say Hello Again!"
            deleteDir()
        }
        success {
            echo "Hello Success"

        }
        failure {
            echo "Hello Failure"
        }
    }
}